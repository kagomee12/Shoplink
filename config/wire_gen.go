// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package config

import (
	"github.com/google/wire"
	"shoplink/app/controller"
	"shoplink/app/pkg"
	"shoplink/app/repository"
	"shoplink/app/service"
)

// Injectors from injector.go:

func Init() *Initialization {
	gormDB := ConnectDB()
	userRepositoryImpl := repository.UserRepositoryInit(gormDB)
	jwtSecret := pkg.NewJWTSecret()
	jwtIssuer := pkg.NewJWTIssuer()
	jwtServiceImpl := pkg.NewJWTService(jwtSecret, jwtIssuer)
	authServiceImpl := service.NewAuthService(userRepositoryImpl, jwtServiceImpl)
	authControllerImpl := controller.AuthControllerInit(authServiceImpl)
	initialization := InitAll(userRepositoryImpl, authServiceImpl, authControllerImpl, jwtServiceImpl)
	return initialization
}

// injector.go:

var db = wire.NewSet(ConnectDB)

var userRepo = wire.NewSet(repository.UserRepositoryInit, wire.Bind(new(repository.UserRepository), new(*repository.UserRepositoryImpl)))

var authService = wire.NewSet(service.NewAuthService, wire.Bind(new(service.AuthService), new(*service.AuthServiceImpl)))

var authController = wire.NewSet(controller.AuthControllerInit, wire.Bind(new(controller.AuthController), new(*controller.AuthControllerImpl)))

var jwt = wire.NewSet(pkg.NewJWTService, wire.Bind(new(pkg.JWTService), new(*pkg.JWTServiceImpl)), pkg.NewJWTSecret, pkg.NewJWTIssuer)
